# -*- coding: utf-8 -*-
"""Lise_TutumOlcegi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPQBs-jkYaJ6bIL_AOMW62f3SpHI2ttr
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error
from xgboost import XGBRegressor
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import scipy.stats as stats
from statsmodels.stats.proportion import proportions_ztest
from scipy.stats import shapiro
from scipy.stats import pearsonr
from scipy.stats import spearmanr

os.chdir("/content/drive/MyDrive/Works/Bitirme")

data_file = "Data/Veriseti_Anadolu_Liseleri.xlsx"
data_original = pd.read_excel(data_file)
df_1 = data_original.copy()
df_1 = df_1.drop(columns=["okuladi", "okulno"])
df_1.head()

df_1.iloc[:, -7:] = df_1.iloc[:, -7:].astype("int64")
df_1.dtypes

def sifir_bir_duzelt(degisken):
  for i in df_1[degisken].index:
    if df_1[degisken][i] ==0:
      df_1[degisken][i] = 1
    elif df_1[degisken][i]==1:
      df_1[degisken][i]=0

sifir_bir_duzelt("Asag")
sifir_bir_duzelt("Bsag")
sifir_bir_duzelt("Aoz")
sifir_bir_duzelt("Boz")
sifir_bir_duzelt("ABayri")
sifir_bir_duzelt("Abirlikte")
sifir_bir_duzelt("Acalisma")
sifir_bir_duzelt("Bcalisma")
sifir_bir_duzelt("oda")
sifir_bir_duzelt("hastalik")
sifir_bir_duzelt("okul_dyk")
sifir_bir_duzelt("ozel_kurs")
sifir_bir_duzelt("ortaokul_kurs")
sifir_bir_duzelt("ortaokul_ozelders")

df_1.head()

data_file_tutum = "Data/Lise_TutumOlcegi.xlsx"
data_original_tutum = pd.read_excel(data_file_tutum)
df_tutum = data_original_tutum.copy()
df_tutum.head()

df_tutum_columns = list(df_tutum.loc[0,:])
df_tutum_columns

df_tutum.columns = df_tutum_columns

df_tutum.drop(index=0, inplace=True)
df_tutum.head()



df_aoy = df_tutum.iloc[:, 31:45] #algılanan okul yaşantıları ölçeği
df_aoy.head()

df_odo = df_tutum.iloc[:, 45:61] #öz düzenleme ölçeği
df_odo.head()

df_ako = df_tutum.iloc[:, 61:76] #ayda sınav kaygısı ölçeği
df_ako.head()



df_aoy_mean = pd.DataFrame(df_aoy.mean(axis=1), columns=["aoy"]) #algılanan okul yaşantıları ölçeği ortalaması

df_aoy_mean = df_aoy_mean.reset_index()
df_aoy_mean = df_aoy_mean.iloc[:, -1:]
df_aoy_mean

df_odo_mean = pd.DataFrame(df_odo.mean(axis=1), columns=["odo"]) #öz düzenleme ölçeği

df_odo_mean = df_odo_mean.reset_index()
df_odo_mean = df_odo_mean.iloc[:, -1:]
df_odo_mean

df_ako_mean = pd.DataFrame(df_ako.mean(axis=1), columns=["ako"]) #ayda sınav kaygısı ölçeği

df_ako_mean = df_ako_mean.reset_index()
df_ako_mean = df_ako_mean.iloc[:, -1:]
df_ako_mean

"""`df_aoy_mean`: algılanan okul yaşantıları ölçeği ortalaması  
`df_odo_mean`: öz düzenleme ölçeği ortalaması  
`df_ako_mean`: ayda sınav kaygısı ölçeği ortalaması

 dataframe'lerinde tutum ölçeklerinin ortalamaları saklanmaktadır.
"""

df_aoy_mean

df_total = df_1.join([df_aoy_mean, df_odo_mean, df_ako_mean])

df_total

"""## Regresyon Analizi"""

fig, axes = plt.subplots(1, 3, figsize=(25,5), sharey=True)
#fig.suptitle('Tutum Ölçekleri ile 11. Sınıf Ortalaması İlişkileri')
sns.set(font_scale=1.4)
sns.regplot(ax=axes[0],x=df_total.ort11, y=df_total.aoy, ci=100).set_title("11. Sınıf ort. ile algılanan okul yaşantıları ölçeği ilişkisi");
#axes[0].set_title('Title of the first chart')
sns.regplot(ax=axes[1], x=df_total.ort11, y=df_total.odo, ci=100).set_title("11. Sınıf ort. ile öz değerlendirme ölçeği ilişkisi");
sns.regplot(ax=axes[2],x=df_total.ort11, y=df_total.ako, ci=100).set_title("11. Sınıf ort. ile sınav kaygısı ölçeği ilişkisi");

"""Burada elde edilen regresyon analizleri sonuçlarından anlamlı bir ilişki çıkarılamamıştır."""



"""## Korelasyon Analizi"""

x_reduced_col_names = df_total.corr().abs()["ort11"].nlargest(12).index
df_total[x_reduced_col_names].corr()

plt.figure(figsize=(13,10))
correlation=df_total[x_reduced_col_names].corr()
sns.set(font_scale=1.2)

sns.heatmap(correlation, annot=True,cmap="BuPu");
plt.xticks(rotation=60)
plt.title("Değişkenler Arasındaki Korelasyonlar");

"""# Hipotez Testleri

##Korelasyon Testi
###Pearson's Korelasyon Katsayısı

İki örneğin doğrusal bir ilişkisi olup olmadığını test eder.

###Varsayımlar

* Her örnekteki gözlemler bağımsızdır ve aynı şekilde dağıtılmıştır.
* Her örnekteki gözlemler normal olarak dağıtılmıştır.
* Her örnekteki gözlemler aynı varyansa sahiptir.

###Yorumlama

* H0: iki örnek bağımsızdır.
* H1: Örnekler arasında bağımlılık vardır.
"""

aoy_values = df_total.aoy.values #algılanan okul yaşantıları ölçeği ortalaması
ortalama11 = df_total.ort11.values

stat, p = pearsonr(aoy_values, ortalama11)

print("stat= {:.3f}, p= {:.8f}".format(stat, p))

if p > 0.05:
  print("Algılanan okul yaşantıları ölçeği ortalaması ve 11. sınıf ortalaması muhtemelen bağımsızdır.")
else:
  print("Algılanan okul yaşantıları ölçeği ortalaması ve 11. sınıf ortalaması muhtemelen bağımlıdır.")

odo_values = df_total.odo.values #öz düzenleme ölçeği
ortalama11 = df_total.ort11.values

stat, p = pearsonr(odo_values, ortalama11)

print("stat= {:.3f}, p= {:.8f}".format(stat, p))

if p > 0.05:
  print("Öz düzenleme ölçeği ortalaması ve 11. sınıf ortalaması muhtemelen bağımsızdır.")
else:
  print("Öz düzenleme ölçeği ortalaması ve 11. sınıf ortalaması muhtemelen bağımlıdır.")

ako_values = df_total.ako.values #ayda sınav kaygısı ölçeği
ortalama11 = df_total.ort11.values

stat, p = pearsonr(ako_values, ortalama11)

print("stat= {:.3f}, p= {:.8f}".format(stat, p))

if p > 0.05:
  print("Ayda sınav kaygısı ölçeği ortalaması ve 11. sınıf ortalaması muhtemelen bağımsızdır.")
else:
  print("Ayda sınav kaygısı ölçeği ortalaması ve 11. sınıf ortalaması muhtemelen bağımlıdır.")

"""**Hipotez testleri sonuçlarında Algılanan Okul Yaşantıları Ölçeği Ortalaması ve Öz Düzenleme Ölçeği Ortalaması, 11. Sınıf Not Ortalaması ile bağımlı çıktığından, bu değişkenler de makine öğrenmesinde kullanılacak değişkenlere eklenmiştir.**

#Makine Öğrenmesi

## Regresyon
"""

x = df_total
y = df_total.ort11

x = x[x_reduced_col_names]

#x.iloc[:, -2:] = x.iloc[:, -2:].astype("int64")
x.dtypes

x = x.drop("ort11", axis=1)
y = df_total.ort11

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state=42)

"""#XGBoost

Structured veriler için en doğru sonuçları veren modelleme tekniği.
"""

XGB_model = XGBRegressor()

XGB_model.fit(train_x, train_y)

predictions = XGB_model.predict(val_x)
print('Eğitim doğruluğu :',XGB_model.score(train_x,train_y)*100)
print('Test doğruluğu :',XGB_model.score(val_x,val_y)*100)
print("Mean Absolute Error: " + str(mean_absolute_error(predictions, val_y)))

val_predictions = XGB_model.predict(val_x)

pred = val_predictions[-10:].astype("int64")
org = val_y[-10:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred

"""

---

# Classification
"""

def puan_olcegi(ort):
  for i in df_total[ort].index:
    if df_total[ort][i] >=0 and df_total[ort][i] <= 24:
      df_total[ort][i] = 0
    elif df_total[ort][i] >=25 and df_total[ort][i] <= 44:
      df_total[ort][i] = 1
    elif df_total[ort][i] >= 45 and df_total[ort][i] <=54:
      df_total[ort][i] = 2
    elif df_total[ort][i] >= 55 and df_total[ort][i] <=69:
      df_total[ort][i] = 3
    elif df_total[ort][i] >= 70 and df_total[ort][i] <=84:
      df_total[ort][i] = 4
    elif df_total[ort][i] >= 85 and df_total[ort][i] <=100:
      df_total[ort][i] = 5

puan_olcegi(ort = "ort11")
puan_olcegi(ort = "ort10")
puan_olcegi(ort = "ort9")
puan_olcegi(ort = "turkce9")
puan_olcegi(ort = "mat9")
puan_olcegi(ort = "ortaokul_puani")

df_total



x_cl = df_total #degiskenler
y_cl = df_total.ort11 #tahmin edilecek

x_cl.head()

x_cl_reduced_col_names = x_cl.corr().abs()["ort11"].nlargest(12).index
x_cl[x_cl_reduced_col_names].corr()

x_cl = x_cl[x_cl_reduced_col_names]
x_cl.dtypes

"""## Split Data"""

x_cl = x_cl.drop("ort11", axis=1)
y_cl = df_total.ort11

train_x, val_x, train_y, val_y = train_test_split(x_cl, y_cl, random_state=42)

"""##Specify and Fit the Model

### Support Vector Machine (SVM)

SVM sınıfları (özellikleri) bir hiper düzlemle bölen makine öğrenmesi algoritmasıdır.
"""

ort_svm = svm.SVC(kernel = "poly")
ort_svm.fit(train_x,train_y)

svm_predict = ort_svm.predict(val_x)
valy = np.array(val_y)
svm_accuracy = accuracy_score(valy,svm_predict)
svm_accuracy = svm_accuracy*100
print("SVM Accuracy for ort dataset : %",svm_accuracy)

"""### SVM Modelinin Sonuçlarının İncelenmesi"""

val_predictions = ort_svm.predict(val_x)

print(val_predictions[:5], "\n")

print(val_y.head())

pred = val_predictions[-10:].astype("int64")
org = val_y[-10:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred

"""### Random Forest Classifier"""

ort_randomforest = RandomForestClassifier(n_estimators = 600,
                                          max_features = "sqrt",
                                          max_depth = 4,
                                          min_samples_split = 0.27,
                                          min_samples_leaf=4,
                                          random_state=2) 
#n _estimators parametresiyle ormanda bulunmasını istediğimiz karar ağacı sayısını belirliyoruz.

ort_randomforest.fit(train_x,train_y)

randomforest_accuracy = ort_randomforest.score(val_x,val_y)*100
print('Random Forest Accuracy for ort dataset on test data : %',randomforest_accuracy)
print('Random Forest Accuracy for ort dataset on train data : %',ort_randomforest.score(train_x,train_y)*100)

"""### Random Forest Modelinin Sonuçlarının İncelenmesi"""

val_predictions = ort_randomforest.predict(val_x)

pred = val_predictions[-20:].astype("int64")
org = val_y[-20:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred