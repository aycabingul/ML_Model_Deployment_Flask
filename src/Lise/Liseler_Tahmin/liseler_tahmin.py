# -*- coding: utf-8 -*-
"""Liseler_Tahmin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R56yBNPtDwb2B52266V0qH5YZexW4jqf
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error
from xgboost import XGBRegressor
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import plot_confusion_matrix

os.chdir("/content/drive/MyDrive/Works/Bitirme")

data_file = "Data/Veriseti_Anadolu_Liseleri.xlsx"
data_original = pd.read_excel(data_file)
df = data_original.copy()
df = df.drop(columns=["okuladi", "okulno"])
df.head()

df.dtypes

df.iloc[:, -7:] = df.iloc[:, -7:].astype("int64")

df.dtypes

"""Hayır=1 Evet=0 değerlerini Hayır=0 Evet=1 olarak değiştirelim;"""

def sifir_bir_duzelt(degisken):
  for i in df[degisken].index:
    if df[degisken][i] ==0:
      df[degisken][i] = 1
    elif df[degisken][i]==1:
      df[degisken][i]=0

sifir_bir_duzelt("Asag")
sifir_bir_duzelt("Bsag")
sifir_bir_duzelt("Aoz")
sifir_bir_duzelt("Boz")
sifir_bir_duzelt("ABayri")
sifir_bir_duzelt("Abirlikte")
sifir_bir_duzelt("Acalisma")
sifir_bir_duzelt("Bcalisma")
sifir_bir_duzelt("oda")
sifir_bir_duzelt("hastalik")
sifir_bir_duzelt("okul_dyk")
sifir_bir_duzelt("ozel_kurs")
sifir_bir_duzelt("ortaokul_kurs")
sifir_bir_duzelt("ortaokul_ozelders")

df.head()

"""# Aykırı Değer Tespiti"""

sns.boxplot(x = df.ort9)

sns.boxplot(x = df.lgs_puani)

Q1 = df.lgs_puani.quantile(0.25)
Q3 = df.lgs_puani.quantile(0.75)
IQR = Q3-Q1
lower = Q1 - 1.5*IQR
upper = Q3 + 1.5*IQR
df.loc[df["lgs_puani"] > upper,"lgs_puani"] = upper
df.loc[df["lgs_puani"] < lower,"lgs_puani"] = lower
sns.boxplot(x = df.lgs_puani)

Q1 = df.ort9.quantile(0.25)
Q3 = df.ort9.quantile(0.75)
IQR = Q3-Q1
lower = Q1 - 1.5*IQR
upper = Q3 + 1.5*IQR
df.loc[df["ort9"] > upper,"ort9"] = upper

sns.boxplot(x = df.ort9)

"""#Feature Selection"""

x = df #degiskenler
y = df.ort11 #tahmin edilecek

x.head()

x.corr()

fig, ax = plt.subplots(figsize=(30,20)) 
sns.heatmap(df.corr(), annot=True, linewidths=0.3, ax=ax)
plt.savefig("AnadoluLiseleri/anadolu_heatmap.png")

df_kadin = x["cinsiyet"] == 1
x_kadin = x[df_kadin]

df_erkek = x["cinsiyet"] == 0
x_erkek = x[df_erkek]

kadin_desc = x_kadin.describe().T
erkek_desc = x_erkek.describe().T

pd.concat([kadin_desc, erkek_desc], axis=1)

x_reduced_col_names = x.corr().abs()["ort11"].nlargest(10).index
x[x_reduced_col_names].corr()

x = x[x_reduced_col_names]
x.dtypes

"""9. sınıf türkçe ve matematik derslerinin not ortalamaları ile 11. sınıf not ortalaması yüksek korelasyonlu çıkmıştır."""

fig, ax = plt.subplots(figsize=(10,10), dpi=100) 
sns.set(font_scale=1.2)
sns.heatmap(x[x_reduced_col_names].corr(), annot=True, linewidths=0.3, ax=ax)
plt.xticks(rotation=60)
plt.savefig("AnadoluLiseleri/anadolu_reduced_heatmap.png")

"""#Split Data"""

x = x.drop("ort11", axis=1)
y = df.ort11

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state=42)

"""# Specify and Fit the Model

##Decision Tree Regressor
"""

model = DecisionTreeRegressor(max_depth=2, 
                              min_samples_split=0.1, 
                              min_samples_leaf=0.1,
                              max_features="auto") #max_depth=2

model.fit(train_x, train_y)

val_predictions = model.predict(val_x)

print("Eğitim doğruluğu: ", model.score(train_x, train_y)*100)
print("Test doğruluğu: ", model.score(val_x, val_y)*100)

val_mae = mean_absolute_error(val_y, val_predictions)

print(val_mae)

pred = val_predictions[-10:].astype("int64")
org = val_y[-10:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred

"""## XGBoost"""

XGB_model = XGBRegressor()

XGB_model.fit(train_x, train_y)

predictions = XGB_model.predict(val_x)
print('Eğitim doğruluğu :',XGB_model.score(train_x,train_y)*100)
print('Test doğruluğu :',XGB_model.score(val_x,val_y)*100)
print("Mean Absolute Error: " + str(mean_absolute_error(predictions, val_y)))

"""## Parameter Tuning"""

XGB_model = XGBRegressor(min_child_weight=6,
                         max_depth=5,
                         subsample=0.6,
                         colsample_bytree=0.6,
                         n_estimators=500,
                         objective="reg:squarederror"
                         )
XGB_model.fit(train_x, train_y,
              early_stopping_rounds = 5,
              eval_set=[(val_x, val_y)],
              
              verbose=False)

predictions = XGB_model.predict(val_x)

print('Eğitim doğruluğu :',XGB_model.score(train_x,train_y)*100)
print('Test doğruluğu :',XGB_model.score(val_x,val_y)*100)
print("Mean Absolute Error: " + str(mean_absolute_error(predictions, val_y)))

val_predictions = XGB_model.predict(val_x)

pred = val_predictions[-10:].astype("int64")
org = val_y[-10:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred

"""---

# Classification
"""

data_file = "Data/Veriseti_Anadolu_Liseleri.xlsx"
data_original = pd.read_excel(data_file)
df = data_original.copy()
df = df.drop(columns=["okuladi", "okulno"])
df.head()

def sifir_bir_duzelt(degisken):
  for i in df[degisken].index:
    if df[degisken][i] ==0:
      df[degisken][i] = 1
    elif df[degisken][i]==1:
      df[degisken][i]=0

sifir_bir_duzelt("Asag")
sifir_bir_duzelt("Bsag")
sifir_bir_duzelt("Aoz")
sifir_bir_duzelt("Boz")
sifir_bir_duzelt("ABayri")
sifir_bir_duzelt("Abirlikte")
sifir_bir_duzelt("Acalisma")
sifir_bir_duzelt("Bcalisma")
sifir_bir_duzelt("oda")
sifir_bir_duzelt("hastalik")
sifir_bir_duzelt("okul_dyk")
sifir_bir_duzelt("ozel_kurs")
sifir_bir_duzelt("ortaokul_kurs")
sifir_bir_duzelt("ortaokul_ozelders")

"""# Aykırı Değer Tespiti"""

sns.boxplot(x = df.ort9)

sns.boxplot(x = df.lgs_puani)

Q1 = df.lgs_puani.quantile(0.25)
Q3 = df.lgs_puani.quantile(0.75)
IQR = Q3-Q1
lower = Q1 - 1.5*IQR
upper = Q3 + 1.5*IQR
df.loc[df["lgs_puani"] > upper,"lgs_puani"] = upper

sns.boxplot(x = df.lgs_puani)

Q1 = df.ort9.quantile(0.25)
Q3 = df.ort9.quantile(0.75)
IQR = Q3-Q1
lower = Q1 - 1.5*IQR
upper = Q3 + 1.5*IQR
df.loc[df["ort9"] > upper,"ort9"] = upper

sns.boxplot(x = df.ort9)

#df.iloc[:, -7:] = df.iloc[:, -7:].astype("int64")
#df

def puan_olcegi(ort):
  for i in df[ort].index:
    #if df[ort][i] >=0 and df[ort][i] <= 49,99:
     # df[ort][i] = 0
    if df[ort][i] >=0 and df[ort][i] <= 49.99:
      df[ort][i] = 1
    elif df[ort][i] >= 50 and df[ort][i] <=59.99:
      df[ort][i] = 2
    elif df[ort][i] >= 60 and df[ort][i] <=69.99:
      df[ort][i] = 3
    elif df[ort][i] >= 70 and df[ort][i] <=84.99:
      df[ort][i] = 4
    elif df[ort][i] >= 85 and df[ort][i] <=100:
      df[ort][i] = 5

puan_olcegi(ort = "ort9")
puan_olcegi(ort = "ort10")
puan_olcegi(ort = "ort11")
puan_olcegi(ort = "turkce9")
puan_olcegi(ort = "mat9")

df.iloc[:, -7:] = df.iloc[:, -7:].astype("int64")
df

"""##Feature Selection"""

x_cl = df #degiskenler
y_cl = df.ort11 #tahmin edilecek

x_cl.head()

x_cl.corr()

fig, ax = plt.subplots(figsize=(30,20)) 
sns.heatmap(df.corr(), annot=True, linewidths=0.3, ax=ax)
plt.savefig("AnadoluLiseleri/anadolu_heatmap_classification.png")

x_cl.corr().abs()["ort11"].nlargest(10)

x_cl_reduced_col_names = x_cl.corr().abs()["ort11"].nlargest(10).index
x_cl[x_cl_reduced_col_names].corr()

x_cl = x_cl[x_cl_reduced_col_names]
x_cl.dtypes

fig, ax = plt.subplots(figsize=(10,10), dpi=100) 
sns.heatmap(x_cl[x_cl_reduced_col_names].corr(), annot=True, linewidths=0.3, ax=ax)
plt.savefig("AnadoluLiseleri/anadolu_reduced_cl_heatmap.png")

"""## Split Data"""

x_cl = x_cl.drop("ort11", axis=1)
y_cl = df.ort11

train_x, val_x, train_y, val_y = train_test_split(x_cl, y_cl, random_state=42)

"""##Specify and Fit the Model

### Multinomial Logistic Regression

Üç veya daha fazla kategoriye sahip verileri sınıflandırmak için kullanılan bir Logistic Regression yöntemidir.
"""

ort_logistic = LogisticRegression()

ort_logistic.fit(train_x, train_y)

base_model_predicts = ort_logistic.predict(val_x)
print('Accuracy from base model train data : {0}'.format(ort_logistic.score(train_x, train_y)))
print('Accuracy from base model test data: {0}'.format(ort_logistic.score(val_x, val_y)))

custom_ort_logistic = LogisticRegression( penalty = "l2", C=100)

custom_ort_logistic.fit(train_x,train_y)

custom_model_predicts = custom_ort_logistic.predict(val_x)
print('Accuracy from base model train data : {0}'.format(custom_ort_logistic.score(train_x, train_y)))
print('Accuracy from base model test data: {0}'.format(custom_ort_logistic.score(val_x, val_y)))

base_model_accuracy = ort_logistic.score(val_x,val_y)*100
custom_model_accuracy = custom_ort_logistic.score(val_x,val_y)*100

plt.bar("Custom model",custom_model_accuracy)
plt.bar("Base model",base_model_accuracy)
plt.yticks([0,20,40,60,70,80,100])
plt.title('Accuracies for Custom and Base models')
plt.show()

"""###K-Nearest Neighbor Algorithm (KNN)"""

ort_knn = KNeighborsClassifier(n_neighbors = 10) #K komşu sayısı

ort_knn.fit(train_x,train_y) #Modelimizi eğitim verilerine göre eğittik.

knn_test_values = ort_knn.predict(val_x) #Tahmin edilen KNN değerleri için değişkenlerden yararlanıyoruz.
#Bu değerleri test verilerimizin etiketleriyle, yani gerçek sonuçlarla, karşılaştıracağız
#ve başarı oranımızı göreceğiz.
true_predicts = 0
import numpy
valy = numpy.array(val_y)
for i in range(len(val_y)):
    if(valy[i] == knn_test_values[i]):
        true_predicts += 1


print("Test Variables Size : ",len(valy))
#Şimdi, başarı oranını yüzde cinsinden hesaplayalım.
#Toplam test verisi sayısı 30

knn_accuracy = 100*true_predicts/len(valy)
print("KNN Accuracy for ort dataset : %",knn_accuracy)

plt.bar("Custom Model Acc",custom_model_accuracy)
plt.bar("Base Model Acc",base_model_accuracy)
plt.bar("KNN Acc",knn_accuracy)
plt.yticks([0,20,40,60,80,100]) #y ekseninde görmek istediğimiz rakamlar
plt.title("3 Models Comparison")

plt.show()



"""### Support Vector Machine (SVM)"""

ort_svm = svm.SVC(kernel = "poly")
ort_svm.fit(train_x,train_y)

svm_predict = ort_svm.predict(val_x)

svm_accuracy = accuracy_score(valy,svm_predict)
svm_accuracy = svm_accuracy*100
print("SVM Accuracy for ort dataset : %",svm_accuracy)

plt.figure(figsize =(10,7))
plt.bar('Custom Model Acc',custom_model_accuracy)
plt.bar('Base Model Acc',base_model_accuracy)
plt.bar('KNN Acc',knn_accuracy)
plt.bar('SVM Acc',svm_accuracy)
plt.title("4 Model Comparison")


plt.show()



"""### Random Forest Classifier"""

ort_randomforest = RandomForestClassifier(n_estimators = 600,
                                          max_features = "sqrt",
                                          max_depth = 4,
                                          min_samples_split = 0.27,
                                          min_samples_leaf=4,
                                          random_state=2) 
#n _estimators parametresiyle ormanda bulunmasını istediğimiz karar ağacı sayısını belirliyoruz.

ort_randomforest.fit(train_x,train_y)

randomforest_accuracy = ort_randomforest.score(val_x,val_y)*100
print('Random Forest Accuracy for ort dataset on test data : %',randomforest_accuracy)
print('Random Forest Accuracy for ort dataset on train data : %',ort_randomforest.score(train_x,train_y)*100)



"""#Confusion Matrix"""

title1 = "Confusion matrix, without normalization"
title2 = "Normalized confusion matrix"

class_names = ["1", "2", "3", "4", "5"]

np.set_printoptions(precision=2)

fig, ax = plt.subplots(figsize=(10, 10))
#Confusion matrix, without normalization
disp = plot_confusion_matrix(ort_randomforest, val_x, val_y,
                                 display_labels=class_names,
                                 cmap=plt.cm.Blues,
                                 normalize=None,
                                 values_format = "d",
                                  ax=ax)
disp.ax_.set_title(title1)

plt.grid(False)
    
print(title1)
print(disp.confusion_matrix)


plt.show()

fig, ax2 = plt.subplots(figsize=(10, 10))
#Normalized confusion matrix
disp = plot_confusion_matrix(ort_randomforest, val_x, val_y,
                                 display_labels=class_names,
                                 cmap=plt.cm.Blues,
                                 normalize="true",
                                 values_format = ".2g",
                                  ax=ax2)
disp.ax_.set_title(title2)

plt.grid(False)
    
print(title2)
print(disp.confusion_matrix)


plt.show()

data_file = "Data/Veriseti_Anadolu_Liseleri.xlsx"
data_original = pd.read_excel(data_file)
df100 = data_original.copy()
df100 = df100.drop(columns=["okuladi", "okulno"])
df100.head()

not2_index = df.index[df['ort11'] == 2].tolist()

df100.loc[not2_index].ort11.values

plt.figure(figsize =(14,7))
plt.bar('Custom Model Acc',custom_model_accuracy)
plt.bar('Base Model Acc',base_model_accuracy)
plt.bar('SVM Acc',svm_accuracy)
plt.bar('KNN Acc',knn_accuracy)
plt.bar('Random Forest Acc',randomforest_accuracy)
plt.yticks([i for i in range(10,105,5)])
plt.title("5 Model Comparison")

plt.show()



"""### Random Forest Modelinin Sonuçlarının İncelenmesi"""

val_predictions = ort_randomforest.predict(val_x)

pred = val_predictions[-20:].astype("int64")
org = val_y[-20:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred

"""# Sadece ortalamalar ve lgs notu ile tahminleme"""

df_not = df.iloc[:, -7:]
df_not.head()

x = df_not.drop("ort11", axis=1)
y = df_not.ort11

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state=42)

model = DecisionTreeRegressor(max_depth=3)

model.fit(train_x, train_y)

val_predictions = model.predict(val_x)

print("Eğitim doğruluğu: ", model.score(train_x, train_y)*100)
print("Test doğruluğu: ", model.score(val_x, val_y)*100)



XGB_model = XGBRegressor(min_child_weight=2,
                         max_depth=3,
                         subsample=0.6,
                         colsample_bytree=0.6,
                         n_estimators=500,
                         objective="reg:squarederror"
                         )
XGB_model.fit(train_x, train_y,
              early_stopping_rounds = 5,
              eval_set=[(val_x, val_y)],
              
              verbose=False)

predictions = XGB_model.predict(val_x)

print('Eğitim doğruluğu :',XGB_model.score(train_x,train_y)*100)
print('Test doğruluğu :',XGB_model.score(val_x,val_y)*100)
print("Mean Absolute Error: " + str(mean_absolute_error(predictions, val_y)))

