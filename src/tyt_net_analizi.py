# -*- coding: utf-8 -*-
"""TYT_net_analizi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XYb3az74VNYprA4QJBr_i5wUqhHrFZSX

#Değişkenler

**Lise Kurum Kodu**: lise_kod  
**Lise Adı**: lise_ad  
**YKS 2020 TOPLAM Net**: yks_toplam_net  
**2016 TEOG Yerleştirme Puanı**: yerlestirme  
**2016 TEOG Türkiye Yüzdelik Dilim**: turkiye_yuzdelik  
**2016 TEOG DONEM1 PUAN**: d1_puan  
**2016 TEOG DONEM2 PUAN**: d2_puan  
**2016 TEOG Ağırlık Ortalama Standart Puan**: std_puan  
**2016 TEOG Yılsonu BP 8_PUAN**: 8_yspuan  
**2016 TEOG Yılsonu BP 7_PUAN**: 7_yspuan  
**2016 TEOG YılsonuBP 6_PUAN**: 6_yspuan  
**2016 Ortaokul Dönem 1 Kurum Kodu**: ortaokul_kod  
**2016 Ortaokul Dönem 1 Okul**: ortaokul_ad  
**2016 Ortaokul Dönem 1 TEOG  MATEMATİK**: mat1  
**2016 Ortaokul Dönem 1 TEOG  TÜRKÇE**: turkce1  
**2016 Ortaokul Dönem 1 TEOG  DİN**: din1  
**2016 Ortaokul Dönem 1 TEOG  FEN**: fen1  
**2016 Ortaokul Dönem 1 TEOG  YABANCI DİL**: yabancidil1  
**2016 Ortaokul Dönem 1 TEOG  İNKILAP**: inkilap1  
**2016 Ortaokul Dönem 2 TEOG TÜRKÇE**: turkce2  
**2016 Ortaokul Dönem 2 TEOG MATEMATİK**: mat2  
**2016 Ortaokul Dönem 2 TEOG FEN**: fen2  
**2016 Ortaokul Dönem 2 TEOG İNKILAP**: inkilap2  
**2016 Ortaokul Dönem 2 TEOG YABANCI DİL**: yabancidil2  
**2016 Ortaokul Dönem 2 TEOG DİN KÜLTÜRÜ**: din2
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error
from xgboost import XGBRegressor
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import plot_confusion_matrix
from mlxtend.feature_selection import SequentialFeatureSelector as SFS
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from sklearn import model_selection, preprocessing, feature_selection, ensemble, linear_model, metrics, decomposition
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVR
import sklearn

os.chdir("/content/drive/MyDrive/Works/Bitirme")

"""#Verilerin Çekilmesi"""

data_file = "Data/VAM-Veri.xlsx"
data_original = pd.read_excel(data_file)
df_yks = data_original.drop(["lise_ad", "ortaokul_ad"], axis=1)
df_yks.head()

df_yks["turkiye_yuzdelik"] = df_yks["turkiye_yuzdelik"].str.replace("%", "")

df_yks["d1_puan"].dtypes

for i in df_yks:
  if df_yks[i].dtypes == 'O':
    df_yks[i] = df_yks[i].str.replace(",", ".")

df_yks.head()

df_yks.dtypes

df_yks.iloc[:,:] = df_yks.iloc[:,:].astype("float64")

df_yks.iloc[:,:] = df_yks.iloc[:,:].astype("int64")

df_yks.dtypes

"""Regresyon analizi yaparken yanlış analiz yapmamak için `lise_kod` ve `ortaokul_kod` değişken tipleri nominal veri türüne (kategorik) dönüştürülmelidir."""

df_yks[["lise_kod", "ortaokul_kod"]] = df_yks[["lise_kod", "ortaokul_kod"]].astype("category")

df_yks.dtypes

df_yks.head()

"""## Standardization"""

# Get column names first
names = df_yks.columns
# Create the Scaler object
scaler = preprocessing.StandardScaler()
# Fit your data on the scaler object
scaled_df = scaler.fit_transform(df_yks)
scaled_df = pd.DataFrame(scaled_df, columns=names)

scaled_df = scaled_df.drop(["lise_kod", "ortaokul_kod"], axis=1)

scaled_df.dtypes

"""# `yks_toplam_net` değişkeni ile Backward Elimination ve Regresyon Analizi"""

df_data = scaled_df

x = scaled_df.drop(["yks_toplam_net"], axis=1)
y = scaled_df["yks_toplam_net"]

def backward_elimination(data, target,significance_level = 0.05):
  features = data.columns.tolist()
  while(len(features)>0):
    features_with_constant = sm.add_constant(data[features])
    p_values = sm.OLS(target, features_with_constant).fit().pvalues[1:]
    max_p_value = p_values.max()

    if(max_p_value >= significance_level):
      excluded_feature = p_values.idxmax()
      features.remove(excluded_feature)
    else:
      break 
  return features

yks_futures = backward_elimination(x, y)

yks_futures

"""## Regresyon Analizi"""

x = df_data[yks_futures]
y = df_data["yks_toplam_net"]

"""İstatistik modellerini kullandığımız için, sabit terimi X değerine eklememiz gerekiyor."""

x = sm.add_constant(x)

train_x, test_x, train_y, test_y = train_test_split(x, y, train_size = 0.8, random_state = 42)

model = sm.OLS(train_y, train_x)
model = model.fit()
print(model.summary2())

"""Değişkenlerin sonuca etki yüzdelerini inceleyelim;"""

coefs = model.params
coefs = pd.DataFrame(coefs, columns=["coefficients"])
coefs.drop(index=["const"], inplace=True)
coefs

coef_sum = coefs.coefficients.abs().sum()
coefs_abs = coefs.coefficients.abs().values
coefs_abs

percentages = []
for i in coefs_abs:
  perc = i*100/coef_sum
  percentages.append(perc)

coefs["Percentages"] = percentages

coefs.sort_values(by="Percentages", ascending=False, inplace=True)
print(coefs)

"""#Model

### Split Data
"""

x = df_yks[["turkiye_yuzdelik", 
        "yerlestirme", "d2_puan", "d1_puan", 
        "6_yspuan","7_yspuan"]]
#x = df_yks[yks_futures]
y = df_yks["yks_toplam_net"]

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state=42)

train_x

"""### Specify and Fit the Model"""

from sklearn.svm import SVR
#model = SVR()
model =SVR(C= 1000, gamma= 0.0001, kernel= 'rbf')

accuracies=cross_val_score(model,x,y,cv=5)
print("Accuracy (mean): %", accuracies.mean()*100)
print("std: %", accuracies.std()*100)
scores=cross_val_score(model,x,y,scoring='neg_mean_absolute_error',cv=5)
print("MAE (mean): %",scores.mean())

model.fit(train_x, train_y)

import pickle
model_path = "yks_model.pickle"
pickle.dump(model, open(model_path, "wb"))

"""###  Make Predictions with Validation Data"""

load_model_path="yks_model.pickle"
loaded_model = pickle.load(open(load_model_path, "rb"))

val_predictions = loaded_model.predict(val_x)

print("Eğitim doğruluğu: ", model.score(train_x, train_y)*100)
print("Test doğruluğu: ", model.score(val_x, val_y)*100)

#val_predictions = scaler_valy.inverse_transform(val_predictions)
val_predictions = val_predictions.astype("int64")
val_predictions

"""### Modelin manuel test edilmesi"""

val_x

load_model_path="yks_model.pickle"
loaded_model = pickle.load(open(load_model_path, "rb"))

girdiler = [61,264,315,307,66,76]
data_girdi=pd.DataFrame(columns=["turkiye_yuzdelik", 
        "yerlestirme", "d2_puan", "d1_puan", 
        "6_yspuan","7_yspuan"])
data_girdi = data_girdi.append({'turkiye_yuzdelik': girdiler[0],
                                'yerlestirme': girdiler[1],
                                'd2_puan': girdiler[2],
                                'd1_puan': girdiler[3],
                                '6_yspuan': girdiler[4],
                                '7_yspuan': girdiler[5]},
                                ignore_index=True)

data_girdi

data_girdi=data_girdi.iloc[:,:].astype("int64")

girdi=data_girdi
print(girdi)
cikti=loaded_model.predict(girdi)
print(cikti)



cikti = cikti.astype("int64")
cikti

val_y

