# -*- coding: utf-8 -*-
"""Ortaokul_TutumOlcegi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vmkJQ6uySvQjtuRg19OD5g4NwtezaBoC
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error
from xgboost import XGBRegressor
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

os.chdir("/content/drive/MyDrive/Works/Bitirme")

data_file = "Data/Veriseti_Ortaokullar_GONDERILEN.xlsx"
data_original = pd.read_excel(data_file)
df_1 = data_original.copy()
df_1 = df_1.drop(columns=["okuladi", "okulno"])
df_1.head()

df_1.iloc[:, -3:] = df_1.iloc[:, -3:].astype("int64")
df_1.dtypes

def sifir_bir_duzelt(degisken):
  for i in df_1[degisken].index:
    if df_1[degisken][i] ==0:
      df_1[degisken][i] = 1
    elif df_1[degisken][i]==1:
      df_1[degisken][i]=0

sifir_bir_duzelt("Asag")
sifir_bir_duzelt("Bsag")
sifir_bir_duzelt("Aoz")
sifir_bir_duzelt("Boz")
sifir_bir_duzelt("ABayri")
sifir_bir_duzelt("Abirlikte")
sifir_bir_duzelt("Acalisma")
sifir_bir_duzelt("Bcalisma")
sifir_bir_duzelt("oda")
sifir_bir_duzelt("hastalik")
sifir_bir_duzelt("okul_dyk")
sifir_bir_duzelt("ozel_kurs")

df_1.head()

data_file_tutum = "Data/Ortaokul_TutumOlcegi.xlsx"
data_original_tutum = pd.read_excel(data_file_tutum)
df_tutum = data_original_tutum.copy()
df_tutum.head()

df_tutum_columns = list(df_tutum.loc[0,:])
df_tutum_columns

df_tutum.columns = df_tutum_columns

df_tutum.drop(index=0, inplace=True)
df_tutum.head()

df_aoy = df_tutum.iloc[:, 26:40] #algılanan okul yaşantıları ölçeği
df_aoy.head()

df_odo = df_tutum.iloc[:, 40:56] #öz düzenleme ölçeği
df_odo.head()

df_ako = df_tutum.iloc[:, 56:71] #ayda sınav kaygısı ölçeği
df_ako.head()

df_aoy_mean = pd.DataFrame(df_aoy.mean(axis=1), columns=["aoy"]) #algılanan okul yaşantıları ölçeği ortalaması

df_aoy_mean = df_aoy_mean.reset_index()
df_aoy_mean = df_aoy_mean.iloc[:, -1:]
df_aoy_mean



df_odo_mean = pd.DataFrame(df_odo.mean(axis=1), columns=["odo"]) #öz düzenleme ölçeği

df_odo_mean = df_odo_mean.reset_index()
df_odo_mean = df_odo_mean.iloc[:, -1:]
df_odo_mean

df_ako_mean = pd.DataFrame(df_ako.mean(axis=1), columns=["ako"]) #ayda sınav kaygısı ölçeği

df_ako_mean = df_ako_mean.reset_index()
df_ako_mean = df_ako_mean.iloc[:, -1:]
df_ako_mean

"""`df_aoy_mean`: algılanan okul yaşantıları ölçeği ortalaması  
`df_odo_mean`: öz düzenleme ölçeği ortalaması  
`df_ako_mean`: ayda sınav kaygısı ölçeği ortalaması

 dataframe'lerinde tutum ölçeklerinin ortalamaları saklanmaktadır.
"""

df_aoy_mean

df_total = df_1.join([df_aoy_mean, df_odo_mean, df_ako_mean])

df_total



"""## Regresyon Analizi"""

fig, axes = plt.subplots(1, 3, figsize=(25,5), sharey=True)
#fig.suptitle('Tutum Ölçekleri ile 7. Sınıf Ortalaması İlişkileri')
sns.set(font_scale=1.2)
sns.regplot(ax=axes[0],x=df_total.ort7, y=df_total.aoy, ci=100).set_title("7. Sınıf ort. ile algılanan okul yaşantıları ölçeği ilişkisi");
#axes[0].set_title('Title of the first chart')
sns.regplot(ax=axes[1], x=df_total.ort7, y=df_total.odo, ci=100).set_title("7. Sınıf ort. ile öz değerlendirme ölçeği ilişkisi");
sns.regplot(ax=axes[2],x=df_total.ort7, y=df_total.ako, ci=100).set_title("7. Sınıf ort. ile sınav kaygısı ölçeği ilişkisi");
plt.savefig("tutum_regresyon.png");

"""Buradan elde edilen sonuçlara göre; 

*   Algılanan okul yaşantıları ölçeği ortalaması yükseldikçe 7. sınıf ortalamasının yükseldiği,   
*   Öz değerlendirme ölçeği ortalaması yükseldikçe 7. sınıf ortalamasının yükseldiği,
*   Sınav kaygısı ölçeği ortalaması ile 7. sınıf not ortalamasının doğrusal bir ilişkisi olmadığı

sonuçlarına varılmıştır.

## Korelasyon Analizi
"""

x_reduced_col_names = df_total.corr().abs()["ort7"].nlargest(10).index
df_total[x_reduced_col_names].corr()

plt.figure(figsize=(13,10))
correlation=df_total[x_reduced_col_names].corr()
sns.set(font_scale=1.35)
plt.xticks(rotation=60)
sns.heatmap(correlation, annot=True,cmap="BuPu");
plt.title("Değişkenler Arasındaki Korelasyonlar");

"""# Makine Öğrenmesi

## Regresyon
"""

x = df_total
y = df_total.ort7

x = x[x_reduced_col_names]
x.dtypes

x = x.drop("ort7", axis=1)
y = df_total.ort7

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state=42)



"""#XGBoost

Structured veriler için en doğru sonuçları veren modelleme tekniği.
"""

XGB_model = XGBRegressor()

XGB_model.fit(train_x, train_y)

predictions = XGB_model.predict(val_x)
print('Eğitim doğruluğu :',XGB_model.score(train_x,train_y)*100)
print('Test doğruluğu :',XGB_model.score(val_x,val_y)*100)
print("Mean Absolute Error: " + str(mean_absolute_error(predictions, val_y)))

val_predictions = XGB_model.predict(val_x)

pred = val_predictions[-10:].astype("int64")
org = val_y[-10:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred



"""

---

# Classification
"""

def puan_olcegi(ort):
  for i in df_total[ort].index:
    if df_total[ort][i] >=0 and df_total[ort][i] <= 24:
      df_total[ort][i] = 0
    elif df_total[ort][i] >=25 and df_total[ort][i] <= 44:
      df_total[ort][i] = 1
    elif df_total[ort][i] >= 45 and df_total[ort][i] <=54:
      df_total[ort][i] = 2
    elif df_total[ort][i] >= 55 and df_total[ort][i] <=69:
      df_total[ort][i] = 3
    elif df_total[ort][i] >= 70 and df_total[ort][i] <=84:
      df_total[ort][i] = 4
    elif df_total[ort][i] >= 85 and df_total[ort][i] <=100:
      df_total[ort][i] = 5

puan_olcegi(ort = "ort5")
puan_olcegi(ort = "ort6")
puan_olcegi(ort = "ort7")

df_total



x_cl = df_total #degiskenler
y_cl = df_total.ort7 #tahmin edilecek

x_cl.head()

x_cl_reduced_col_names = x_cl.corr().abs()["ort7"].nlargest(10).index
x_cl[x_cl_reduced_col_names].corr()

x_cl = x_cl[x_cl_reduced_col_names]
x_cl.dtypes

"""## Split Data"""

x_cl = x_cl.drop("ort7", axis=1)
y_cl = df_total.ort7

train_x, val_x, train_y, val_y = train_test_split(x_cl, y_cl, random_state=42)

"""##Specify and Fit the Model

### Support Vector Machine (SVM)

SVM sınıfları (özellikleri) bir hiper düzlemle bölen makine öğrenmesi algoritmasıdır.
"""

ort_svm = svm.SVC(kernel = "poly")
ort_svm.fit(train_x,train_y)

svm_predict = ort_svm.predict(val_x)
valy = np.array(val_y)
svm_accuracy = accuracy_score(valy,svm_predict)
svm_accuracy = svm_accuracy*100
print("SVM Accuracy for ort dataset : %",svm_accuracy)

"""### SVM Modelinin Sonuçlarının İncelenmesi"""

val_predictions = ort_svm.predict(val_x)

print(val_predictions[:5], "\n")

print(val_y.head())

pred = val_predictions[-10:].astype("int64")
org = val_y[-10:].values
df_pred = pd.DataFrame({"preds" : pred, "labels":org})
df_pred