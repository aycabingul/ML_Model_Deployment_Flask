# -*- coding: utf-8 -*-
"""Ortaokul_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HGc0XC0I0TJaQg0aREZmNMdyd0J_ELwK
"""



import tensorflow as tf
import pandas as pd
import os
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import  MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense

os.chdir("/content/drive/MyDrive/Works/Bitirme")

data_file = "Data/Veriseti_Ortaokullar_GONDERILEN.xlsx"
data_original = pd.read_excel(data_file)
df = data_original.copy()
df = df.drop(columns=["okuladi", "okulno"])
df.head()

df.iloc[:, -3:] = df.iloc[:, -3:].astype("int64")

def sifir_bir_duzelt(degisken):
  for i in df[degisken].index:
    if df[degisken][i] ==0:
      df[degisken][i] = 1
    elif df[degisken][i]==1:
      df[degisken][i]=0

sifir_bir_duzelt("Asag")
sifir_bir_duzelt("Bsag")
sifir_bir_duzelt("Aoz")
sifir_bir_duzelt("Boz")
sifir_bir_duzelt("ABayri")
sifir_bir_duzelt("Abirlikte")
sifir_bir_duzelt("Acalisma")
sifir_bir_duzelt("Bcalisma")
sifir_bir_duzelt("oda")
sifir_bir_duzelt("hastalik")
sifir_bir_duzelt("okul_dyk")
sifir_bir_duzelt("ozel_kurs")

df.head()

x_reduced_col_names = df.corr().abs()["ort7"].nlargest(10).index
df[x_reduced_col_names].corr()

x = df[x_reduced_col_names]
x.dtypes

x.shape

df_train = x.iloc[:1000, :]
df_test = x.iloc[1000:, :]

x_train = df_train[df_train.columns.difference(['ort7'])].values
y_train = df_train[['ort7']].values
x_test = df_test[df_test.columns.difference(['ort7'])].values

sc_x = StandardScaler()
sc_y = StandardScaler()

x_train = sc_x.fit_transform(x_train)
x_test = sc_x.transform(x_test)
y_train = sc_y.fit_transform(y_train)

x_test



#train_x, test_x, train_y, test_y = train_test_split(x, y, random_state=42)

x_train

model = Sequential()
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(4, activation='relu', input_shape=(9, )))
model.add(tf.keras.layers.Dense(8, activation= 'relu'))
model.add(tf.keras.layers.Dense(16, activation= 'relu'))
model.add(tf.keras.layers.Dense(32, activation= 'relu'))
model.add(tf.keras.layers.Dense(128, activation= 'relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(1, activation='linear'))
model.compile(optimizer="adam", loss='mean_squared_error', metrics=["mse"])
history = model.fit(x_train,y_train, validation_split=0.03, batch_size=64, epochs=100)

def plot_acc_loss(x):  
  
  loss = x.history["loss"]
  val_loss = x.history["val_loss"]
 
  
  print("loss =", loss[-1])
  print("val_loss =", val_loss[-1])
  epochs = range(1, len(loss) + 1)
  fig = plt.figure()
  

  plt.subplot(2,1,2)
  plt.plot(epochs, loss, "bo", label="Training loss")
  plt.plot(epochs, val_loss, "b", label="Validation loss")
  plt.title("Training and Validation Loss")
  plt.xlabel("Epochs")
  plt.ylabel("Loss")
  plt.legend()
  fig.tight_layout()
  plt.show()
  
  

plot_acc_loss(history)

y_pred = model.predict(x_test)



y_pred = sc_y.inverse_transform(y_pred)

y_pred = pd.DataFrame(y_pred)
y_pred = y_pred.rename(columns={0: "tahminler"})

y_pred = y_pred.astype("int64")

labels = df_test.ort7

df_preds = pd.DataFrame(y_pred[:10])
df_preds

df_labels = pd.DataFrame(labels[:10])
df_labels = df_labels.rename(columns={0: "ger√ßek notlar"})
df_labels = df_labels.reset_index()
df_labels = df_labels.iloc[:, -1:]
df_labels

df_tahminler = pd.concat([df_preds, df_labels.reindex(df_preds.index)], axis=1)

df_tahminler